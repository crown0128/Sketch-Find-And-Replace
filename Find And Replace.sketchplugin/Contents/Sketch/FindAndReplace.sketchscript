var FindAndReplace = function (context) {

    var document, selection, textToFind, textToReplace, readyToReplace, caseSensitivity, matchWhere, matchWhole, searchOptions, searchScope, matchRegex, matchRegexStart, matchRegexEnd, matchRegexCase, BUTTON_OK, itemsMatched;

    // Initialise
    initialise(context);
    
    // If the selected layer is a text layer, bring the text in automatically
    checkInitialSelection();
    
    // Display the user interface
    displayUserInterface()

    
    function displayUserInterface() {
        
        while (readyToReplace === null) {

            var modal = createUserInterface();
            var buttonClick = modal.runModal();

            if (buttonClick === BUTTON_OK) {

                textToFind = [[modal viewAtIndex: 1] stringValue];
                textToReplace = modal.viewAtIndex(3).stringValue();

                searchScope = [[[modal viewAtIndex: 5] selectedCell] tag];
                caseSensitivity = [[[modal viewAtIndex: 7] selectedCell] tag];            			
                matchWhere = [[[modal viewAtIndex: 9] selectedCell] tag];
                matchWhole = [[[modal viewAtIndex: 11] selectedCell] tag];

                if (textToFind != "" && textToReplace != "") {

                    itemsMatched = 0;
                    readyToReplace = true;

                    matchRegex = new RegExp(matchRegexStart[matchWhole][matchWhere] + cleanSearch(textToFind) + matchRegexEnd[matchWhole][matchWhere],matchRegexCase[caseSensitivity]);

                    if (searchScope == 1) {
                        for (var i = 0; i < [selection count]; i++) {
                             searchInLayer(selection[i]);
                        }
                    } else {
                        searchInLayer(document);
                    }

                    [document showMessage: itemsMatched + " instances replaced"];

                } else {
                    alert("Find or replace cannot be blank");
                }

            } else {
                readyToReplace = false;
            }
        }

    }

    
    
    function initialise(context) {
        document = context.document;
        selection = context.selection;
        textToFind = "";
        textToReplace = "";
        readyToReplace = null;
        caseSensitivity = 0; // Off by default
        matchWhere = 1; // Anywhere by default
        matchWhole = 0; // Whole words by default
        searchOptions = (selection && selection.count());
        searchScope = (selection && selection.count());
        matchRegex = null;
        matchRegexStart = [
            ['^(','(?:^|\\b)(', '^(','('],
            ['^(','(', '^(','(']
        ];
        matchRegexEnd = [
            [')$',')(?=\\b|\\$)',')(?=\\b)',')$'],
            [')$',')',')',')$']
        ];
        matchRegexCase = ['gi','g'];
        BUTTON_OK = 1000;
	}    



    
    function checkInitialSelection() {
        if (selection && selection.count() == 1 && selection[0].class() == MSTextLayer) {
            textToFind = selection[0].stringValue();
        }
    }




    function createUserInterface() {

        // Create modal window
        var userInterface = COSAlertWindow.new();

        // Text for modal
        userInterface.setMessageText("Find And Replace");
        userInterface.setInformativeText("Finds and replaces text items in the selected layer(s) or the complete document.");

        // Find text input
        userInterface.addTextLabelWithValue("Find");
        userInterface.addTextFieldWithValue(textToFind);

        // Replace with text input
        userInterface.addTextLabelWithValue("Replace with");
        userInterface.addTextFieldWithValue(textToReplace);

        // Scope
        userInterface.addTextLabelWithValue("Scope");
        var options = searchOptions ? ['Document', 'Selected layer' + ([selection count] > 1 ? "s" : "")] : ['Document'];
        userInterface.addAccessoryView(createRadioButtons(options, searchScope));

        // Case-sensitivity
        userInterface.addTextLabelWithValue("Case sensitive")
        userInterface.addAccessoryView(createRadioButtons(["No", "Yes"], caseSensitivity))

        // Where to match
        userInterface.addTextLabelWithValue("Match text layer")
        userInterface.addAccessoryView(createRadioButtons(["Complete", "Anywhere", "At start","At end"], matchWhere))
        
        // How to match
        userInterface.addTextLabelWithValue("Match whole words only")
        userInterface.addAccessoryView(createRadioButtons(["Yes", "No"], matchWhole))
        
        // Replace and cancel buttons
        userInterface.addButtonWithTitle('Replace All');
        userInterface.addButtonWithTitle('Cancel');

        // Return the Modal structure
        return userInterface;
    }

    
    function createRadioButtons(options, index) {

        var rows = Math.ceil(options.length / 2);
        var selectedRow = Math.floor(index / 2);
        var selectedColumn = index - (selectedRow * 2);
        
        var prototype = [[NSButtonCell alloc] init];
            [prototype setButtonType:NSRadioButton]
        
        var buttonMatrix = [[NSMatrix alloc] initWithFrame: NSMakeRect(20.0, 20.0, 300.0, rows * 25) mode: NSRadioModeMatrix prototype: prototype numberOfRows: rows numberOfColumns: ((options.length < 2) ? 1 : 2)];
            [buttonMatrix setCellSize: NSMakeSize(110, 20)]

        for (i = 0; i < options.length; i++) {
            [[[buttonMatrix cells] objectAtIndex: i] setTitle: options[i]];
            [[[buttonMatrix cells] objectAtIndex: i] setTag: i];
        }
        
        [buttonMatrix selectCellAtRow: selectedRow column: selectedColumn]
        
        return buttonMatrix;
    }


    
    function createSelect(options, index) {
        var selectBox = [[NSPopUpButton alloc] initWithFrame: NSMakeRect(0, 0, 200, 25)]
        [selectBox addItemsWithTitles: options];
        [selectBox selectItemAtIndex: index];
        return selectBox;
    }


    function alert(message) {
        var alertDialog = COSAlertWindow.new();
        [alertDialog setMessageText: "Find And Replace"];
        [alertDialog setInformativeText: message];
        [alertDialog addButtonWithTitle: "OK"];
        
        var responseCode = [alertDialog runModal];
        return responseCode;
    }


    function cleanSearch(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    };
    

    function searchInLayer(layer) {
    
        switch ([layer class]) {

        case MSTextLayer:
			if ([[layer stringValue] trim].match(matchRegex)) {

                itemsMatched++;
layer.setStringValue(layer.stringValue().trim().replace(matchRegex,textToReplace)) 
                layer.setName(layer.stringValue())
            }
            break;

        case MSDocument:
            var documentPages = [layer pages];
            for (var i = 0; i < [documentPages count]; i++) {
                var documentPage = documentPages.objectAtIndex(i);
                searchInLayer(documentPage);
            }
            break;

        case MSPage:
        case MSLayerGroup:
        case MSArtboardGroup:
            var sublayers = [layer layers];
            for (var i = 0; i < [sublayers count]; i++) {
                var sublayer = sublayers.objectAtIndex(i);
                searchInLayer(sublayer);
            }
            break;
        }

    }


}