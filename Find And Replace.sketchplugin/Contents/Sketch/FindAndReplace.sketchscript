var FindAndReplace = function (context) {

    var document, selection, textToFind, textToReplace, caseSensitivity, matchWhere, matchWhole, searchOptions, searchScope, matchRegex, matchRegexStart, matchRegexEnd, matchRegexCase, REPLACE_ALL, READY_TO_SEARCH, CANCELLED, NOT_READY, itemsMatched;

    
    // Initialise
    initialise(context);
    
    // Display the user interface
    userInterfaceLoop();

    
    
    function initialise(context) {
        document = context.document;
        selection = context.selection;
        textToFind = "";
        textToReplace = "";
        readyToReplace = null;
        caseSensitivity = 0; // Off by default
        matchWhere = 1; // Anywhere by default
        matchWhole = 0; // Whole words by default
        searchOptions = (selection && selection.count());
        searchScope = (selection && selection.count());
        matchRegex = null;
        matchRegexStart = [
            ['^(','(?:^|\\b)(', '^(','('],
            ['^(','(', '^(','(']
        ];
        matchRegexEnd = [
            [')$',')(?=\\b|\\$)',')(?=\\b)',')$'],
            [')$',')',')',')$']
        ];
        matchRegexCase = ['gi','g'];
        REPLACE_ALL = 1000;
        READY_TO_SEARCH = true;
        CANCELLED = false;
        NOT_READY = null;
        
        
        // If the selected layer is a text layer, bring the text in automatically
        if (selection && selection.count() == 1 && selection[0].class() == MSTextLayer) {
            textToFind = selection[0].stringValue().trim();
        }
    }    


    // Keep displaying the user interface until we've either cancelled or clicked search
    function userInterfaceLoop() {
        
        var uiResponse = NOT_READY;
        
        while (uiResponse === NOT_READY) {
        
            // Creatte the interface
            var modal = createUserInterface();
            
            // Show it and process the form
            uiResponse = processButtonClick(modal, modal.runModal());
            
            // Process the response
            switch (uiResponse) {

                // Reload the interface
                case NOT_READY:
                    alert("Find or replace cannot be blank");
                    break;

                // Let's go
                case READY_TO_SEARCH:
                    doFindAndReplace();
                    break;                
                    
                // Cancelled
                case CANCELLED:
                    [document showMessage: "Cancelled"];
                    break;
            }
        }
    }
    
    
    function createUserInterface() {

        // Create modal window
        var userInterface = COSAlertWindow.new();

        // Text for modal
        userInterface.setMessageText("Find And Replace");
        userInterface.setInformativeText("Finds and replaces text items in the selected layer(s) or the complete document.");

        // Find text input
        userInterface.addTextLabelWithValue("Find");
        userInterface.addTextFieldWithValue(textToFind);

        // Replace with text input
        userInterface.addTextLabelWithValue("Replace with");
        userInterface.addTextFieldWithValue(textToReplace);

        // Scope
        userInterface.addTextLabelWithValue("Scope");
        var options = searchOptions ? ['Document', 'Selected layer' + ([selection count] > 1 ? "s" : "")] : ['Document'];
        userInterface.addAccessoryView(createRadioButtons(options, searchScope));

        // Case-sensitivity
        userInterface.addTextLabelWithValue("Case sensitive")
        userInterface.addAccessoryView(createRadioButtons(["No", "Yes"], caseSensitivity))

        // Where to match
        userInterface.addTextLabelWithValue("Match text layer")
        userInterface.addAccessoryView(createRadioButtons(["Complete", "Anywhere", "At start","At end"], matchWhere))
        
        // How to match
        userInterface.addTextLabelWithValue("Match whole words only")
        userInterface.addAccessoryView(createRadioButtons(["Yes", "No"], matchWhole))
        
        // Replace and cancel buttons
        userInterface.addButtonWithTitle('Replace All');
        userInterface.addButtonWithTitle('Cancel');

        // Return the Modal structure
        return userInterface;
    }

    
    
    // Creates a matrix of radio buttons for options
    
    function createRadioButtons(options, selectedItem) {

        // Work out how many rows and columns we need for the options
        var rows = Math.ceil(options.length / 2);
        var columns = ((options.length < 2) ? 1 : 2);
        
        // And which row and column contains the selected item
        var selectedRow = Math.floor(selectedItem / 2);
        var selectedColumn = selectedItem - (selectedRow * 2);
        
        // Make a prototype cell
        var buttonCell = [[NSButtonCell alloc] init];
            [buttonCell setButtonType:NSRadioButton]
        
        // And the matrix to contain the cells in Radio mode
        var buttonMatrix = [[NSMatrix alloc] initWithFrame: NSMakeRect(20.0, 20.0, 300.0, rows * 25) mode:NSRadioModeMatrix prototype:buttonCell numberOfRows:rows numberOfColumns:columns];
            [buttonMatrix setCellSize: NSMakeSize(110, 20)]

        // Add the options as cells
        for (i = 0; i < options.length; i++) {
            [[[buttonMatrix cells] objectAtIndex: i] setTitle: options[i]];
            [[[buttonMatrix cells] objectAtIndex: i] setTag: i];
        }
        
        // Select the default one
        [buttonMatrix selectCellAtRow: selectedRow column: selectedColumn]
        
        // Return the matrix so we can display it
        return buttonMatrix;
    }


    
    // Processes the result of the UI
    
    function processButtonClick(modal, buttonClick) {
        
        var result;
        
        // We're only concerned if the replace all button has been clicked
        if (buttonClick === REPLACE_ALL) {

            // Grab the data from the form
            textToFind = [[modal viewAtIndex: 1] stringValue];
            textToReplace = modal.viewAtIndex(3).stringValue();
            searchScope = [[[modal viewAtIndex: 5] selectedCell] tag];
            caseSensitivity = [[[modal viewAtIndex: 7] selectedCell] tag];
            matchWhere = [[[modal viewAtIndex: 9] selectedCell] tag];
            matchWhole = [[[modal viewAtIndex: 11] selectedCell] tag];

            // Make sure we have both text to find and replace
            if (textToFind != "" && textToReplace != "") {
                
                // Yeah, ready to go
                result = READY_TO_SEARCH;
                
            } else {
                
                // Need something in find and replace
                result = NOT_READY;
                
            }
            
        } else {
            
            // Cancel button pressed
            result = CANCELLED;

        }

        return result;        
    }
    
    

    // Kick off the find and replace loop at the correct start point(s)
    
    function doFindAndReplace() {

        // Reset the counter
        itemsMatched = 0;
        
        // Build the regex to match on, based on the user options
        matchRegex = new RegExp(matchRegexStart[matchWhole][matchWhere] + cleanSearch(textToFind) + matchRegexEnd[matchWhole][matchWhere],matchRegexCase[caseSensitivity]);

        // Determine the scope and launch the search accordingly
        if (searchScope == 1) {
            
            // Loop through all the selected layers
            for (var i = 0; i < [selection count]; i++) {
                 searchInLayer(selection[i]);
            }
            
        } else {
            
            // Start at the document root
            searchInLayer(document);
        }

        // Display a small result message
        [document showMessage: itemsMatched + " instance" + (itemsMatched != 1 ? "s" : "") + " replaced"];
        
    }
    
    
    
    // Show a small alert dialog
    
    function alert(message) {
        
        // Create the dialog
        var alertDialog = COSAlertWindow.new();
        
        // Add a title, message and button
        [alertDialog setMessageText: "Find And Replace"];
        [alertDialog setInformativeText: message];
        [alertDialog addButtonWithTitle: "OK"];
        
        // And show it
        [alertDialog runModal];
        
    }


    
    // Clean find input so it's suitable for use in the regex 
    
    function cleanSearch(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&').trim();
    };
    
    

    // Do the actual search within the specified layer.  Recursive to drill down into sublayers.
    
    function searchInLayer(layer) {
    
        // Determine the type of layer we're looking at
        switch ([layer class]) {

            // Text layer - this is the important one
            case MSTextLayer:
                if ([layer stringValue].trim().match(matchRegex)) {
                    itemsMatched++;
                    layer.setStringValue(layer.stringValue().trim().replace(matchRegex,textToReplace)); 
                    layer.setName(layer.stringValue().replace(/(\r\n|\n|\r)/gm," "));
                }
                break;

            // If we've started our search at the document root, loop through the pages
            case MSDocument:
                var documentPages = [layer pages];
                for (var i = 0; i < [documentPages count]; i++) {
                    var documentPage = [documentPages objectAtIndex:i];
                    searchInLayer(documentPage);
                }
                break;

            // Otherwise everything below that is an alias for layers anyway so we can treat them the same and loop through any sublayers
            case MSPage:
            case MSLayerGroup:
            case MSArtboardGroup:
                var sublayers = [layer layers];
                for (var i = 0; i < [sublayers count]; i++) {
                    var sublayer = [sublayers objectAtIndex: i];
                    searchInLayer(sublayer);
                }
                break;
        }
    }


}